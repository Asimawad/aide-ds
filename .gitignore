# Byte-compiled / optimized / DLL files
__pycache__/
*.py[cod]
*$py.class
tests.py
# C extensions
*.so
# aide/backend/backend_deepseek.py
tree.txt
arrk.py
# Distribution / packaging
.Python
pyproject.toml
uv.lock
info/
scratch
build/
develop-eggs/
dist/
reflection_draafts.py
downloads/
test_api.py
eggs/
.eggs/
finetuning/
lib/
lib64/
aide-ds/
parts/
sdist/
var/
wandb/
wheels/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST
aide/backend/backend_vllm_native.py
# PyInstaller
#  Usually these files are written by a python script from a template
#  before PyInstaller builds the exe, so as to inject date/other infos into it.
*.manifest
*.spec

# Installer logs
pip-log.txt
pip-delete-this-directory.txt

# Unit test / coverage reports
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py,cover
.hypothesis/
.pytest_cache/
cover/
aide/backend/vlm2.py
playground_outputs/*
# Translations
*.mo
*.pot

# Django stuff:
*.log
local_settings.py
db.sqlite3
db.sqlite3-journal
scratch.py
review_response_dict.json
draft_playground.py
aideml-main.zip
# Flask stuff:
instance/
.webassets-cache
tests/
# Scrapy stuff:
.scrapy
bfg-1.14.0.jar
# Sphinx documentation
docs/_build/
FULL_CODEBASE.md
# PyBuilder
.pybuilder/
target/
code_scraper.py
# Jupyter Notebook
.ipynb_checkpoints

# IPython
profile_default/
ipython_config.py
vllm-0.9.1.dev60+gd1211f879-cp38-abi3-manylinux1_x86_64.whl
gold_reqs.txt
# pyenv
#   For a library or package, you might want to ignore these files since the code is
#   intended to run in multiple environments; otherwise, check them in:
# .python-version

# pipenv
#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.
#   However, in case of collaboration, if having platform-specific dependencies or dependencies
#   having no cross-platform support, pipenv may install dependencies that don't work, or not
#   install all needed dependencies.
#Pipfile.lock

# poetry
#   Similar to Pipfile.lock, it is generally recommended to include poetry.lock in version control.
#   This is especially recommended for binary packages to ensure reproducibility, and is more
#   commonly ignored for libraries.
#   https://python-poetry.org/docs/basic-usage/#commit-your-poetrylock-file-to-version-control
#poetry.lock

# pdm
#   Similar to Pipfile.lock, it is generally recommended to include pdm.lock in version control.
#pdm.lock
#   pdm stores project-wide configurations in .pdm.toml, but it is recommended to not include it
#   in version control.
#   https://pdm.fming.dev/#use-with-ide
.pdm.toml
.pyproject.toml
# PEP 582; used by e.g. github.com/David-OConnor/pyflow and github.com/pdm-project/pdm
__pypackages__/

# Celery stuff
celerybeat-schedule
celerybeat.pid
.ipp
# SageMath parsed files
*.sage.py
*lock
# Environments
.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/

# Spyder project settings
.spyderproject
.spyproject

# Rope project settings
.ropeproject

# mkdocs documentation
/site

# mypy
.mypy_cache/
.dmypy.json
dmypy.json

# Pyre type checker
.pyre/

# pytype static type analyzer
.pytype/

# Cython debug symbols
cython_debug/

# PyCharm
#  JetBrains specific template is maintained in a separate JetBrains.gitignore that can
#  be found at https://github.com/github/gitignore/blob/main/Global/JetBrains.gitignore
#  and can be added to the global gitignore or merged into this file.  For a more nuclear
#  option (not recommended) you can uncomment the following to ignore the entire idea folder.
.idea/
.vscode/

workspaces
logs

.DS_STORE
.trunk
.qodo
data/
Datasets.zip
Fulld_dataset.zip
.asim
finetuning
prompt_playground


